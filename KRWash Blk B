//Done by Insaf

//Connect to NodeMCU 1.0 (ESP-12E Module)
//Using 220ohms as resistors

//If "Multiple libraries were found for "ArduinoJson.h"" error pops us, just go to the folder and remove any ArduinoJson duplicates
//if fatal error, unplug all pins (Or remove GND pin) and load code
//Do not need to connect to WIFI when loading code

#include <ESP8266WiFi.h> 
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>
#include <ArduinoJson.h>

int value1; //never put =0 as compared to previously
int value2;
int value3;
int value4;

String washmode1;
String washmode2;
String washmode3;
String washmode4;

int pin1=0; //GPIO10 = D1
int pin2=4; //GPIO9 = D2
int pin3=5; //GPIO0 = D3
int pin4=2; //GPIO2 = D4

const int threshold = 20; 

const char* ssid = "XXXX";
const char* password = "XXXX";

#define BOTtoken "XXXX"

X509List cert(TELEGRAM_CERTIFICATE_ROOT);

WiFiClientSecure client;
UniversalTelegramBot bot(BOTtoken, client);

int botRequestDelay = 200;
unsigned long lastTimeBotRan;

void handleNewMessages(int numNewMessages) {
  Serial.println("handleNewMessages");
  Serial.println(String(numNewMessages));

  for (int i=0; i<numNewMessages; i++) {
    // Chat id of the requester
    String chat_id = String(bot.messages[i].chat_id);
    
    // Print the received message
    String text = bot.messages[i].text;
    Serial.println(text);

    String from_name = bot.messages[i].from_name;

    if (text == "/start") {
      String welcome = "Hello, " + from_name + "! \n\n";
      welcome += "Welcome to Kent Ridge Hall Washing Machine Status Tracker! Use the following command(s) to check the Washing Machine Status at KR Block B. \n\n";
      welcome += "Please check the status at least twice before heading down to the Washing Machine :) \n\n";
      //welcome += "/Value1 to Check Photoresistor 1 Value \n";
      //welcome += "/Value2 to Check Photoresistor 2 Value \n";
      //welcome += "/Value3 to Check Photoresistor 3 Value \n";
      //welcome += "/Value4 to Check Photoresistor 4 Value \n";
      //welcome += "/AllValues to Check all Photoresistor Values \n";  
      //welcome += "/M1 to Check Washing Machine 1 Status \n";
      //welcome += "/M2 to Check Washing Machine 2 Status \n";
      //welcome += "/M3 to Check Washing Machine 3 Status \n";
      //welcome += "/M4 to Check Washing Machine 4 Status \n";
      welcome += "/Status to Check status of all Washing Machine \n";      
      bot.sendMessage(chat_id, welcome, "");
    }
    
    //if (text == "/Value1"){
    //  bot.sendMessage(chat_id , "Photoresistor 1 Value is : " + String(value1), "");
    //}

    //if (text == "/Value2"){
    //  bot.sendMessage(chat_id , "Photoresistor 2 Value is : " + String(value2), "");
    //}

    //if (text == "/Value3"){
    //  bot.sendMessage(chat_id , "Photoresistor 3 Value is : " + String(value3), "");
    //}

    //if (text == "/Value4") {
    //  bot.sendMessage(chat_id ,"Photoresistor 4 Value is : " + String(value4), "");
    //}

    //if (text == "/AllValues") {
    //  bot.sendMessage(chat_id ,"Photoresistor 1: " + String(value1)+"\n" +"Photoresistor 2: " + String(value2)+"\n" +"Photoresistor 3: " + String(value3)+"\n" +"Photoresistor 4: " + String(value4), "");
    //}
    
    //if (text == "/M1") {
    //  bot.sendMessage(chat_id ,"Washing Machine 1 is "+ washmode1, "");
    //}
    
    //if (text == "/M2") {
    //  bot.sendMessage(chat_id , "Washing Machine 2 is "+ washmode2, "");
    //}
    
    //if (text == "/M3") {
    //  bot.sendMessage(chat_id , "Washing Machine 3 is "+ washmode3, "");
    //}

    //if (text == "/M4") {
    //  bot.sendMessage(chat_id , "Washing Machine 4 is "+ washmode4, "");
    //}
    
    if (text == "/Status") {
      bot.sendMessage(chat_id ,"Washing Machine 1 is "+ washmode1 +"\n" +"Washing Machine 2 is "+ washmode2 +"\n" +"Washing Machine 3 is "+ washmode3 +"\n" +"Washing Machine 4 is "+ washmode4, "");
    }

  }
}

void setup() {
  Serial.begin(115200);
  
  pinMode(pin1, OUTPUT);
  pinMode(pin2, OUTPUT);
  pinMode(pin3, OUTPUT);
  pinMode(pin4, OUTPUT);
  pinMode(A0, INPUT);

  #ifdef ESP8266
    configTime(0, 0, "pool.ntp.org");      // get UTC time via NTP
    client.setTrustAnchors(&cert); // Add root certificate for api.telegram.org
  #endif

  // Connect to Wi-Fi
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  #ifdef ESP32
    client.setCACert(TELEGRAM_CERTIFICATE_ROOT); // Add root certificate for api.telegram.org
  #endif
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi..");
  }
}

void loop() {
  digitalWrite(pin1, HIGH);
  delay(100);
  value1 = analogRead(A0);
  Serial.println("Pin1: " + String(value1));
  digitalWrite(pin1, LOW);
  
  digitalWrite(pin2, HIGH);
  delay(100);
  value2 = analogRead(A0);
  Serial.println("Pin2: " + String(value2));
  digitalWrite(pin2, LOW);

  digitalWrite(pin3, HIGH);
  delay(100);
  value3 = analogRead(A0);
  Serial.println("Pin3: " + String(value3));
  digitalWrite(pin3, LOW);

  digitalWrite(pin4, HIGH);
  delay(100);
  value4 = analogRead(A0);
  Serial.println("Pin4: " +String(value4));
  digitalWrite(pin4, LOW);

  if(value1 >= threshold){
    washmode1 = "ON";
    }
  else{
    washmode1= "OFF";
  }

  if(value2 >= threshold){
    washmode2 = "ON";
    }
  else{
    washmode2= "OFF";
  }

  if(value3 >= threshold){
    washmode3 = "ON";
    }
  else{
    washmode3= "OFF";
  }

  if(value4 >= threshold){
    washmode4 = "ON";
    }
  else{
    washmode4= "OFF";
  }
  
  if (millis() > lastTimeBotRan + botRequestDelay)  {
    int numNewMessages = bot.getUpdates(bot.last_message_received + 1);

    while(numNewMessages) {
      Serial.println("got response");
      handleNewMessages(numNewMessages);
      numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    }
    lastTimeBotRan = millis();
  }
}
